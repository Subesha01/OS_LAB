FACTORIAL

echo Enter the number
read num
fact=1
for(( i=1;i<=n;i++))
do
    fact=(&(fact * i))
   
done

echo The factorial of $num is $fact

**************************************************************************
FIBANOCCI

echo Enter the number
read num
a1=0
a2=1
echo $a1
echo $a2
for(( i=2;i<num;i++))
do
    sum=$((a1+a2))
    echo $sum
    a1=$a2
    a2=$sum
done
***********************************************************************
SUM OF N NUMBERS

echo Enter the number
read num
sum=0
for(( i=0;i<=num;i++))
do
    sum=$((sum+i))
done
    echo $sum
*************************************************************
GREATEST OF THREE

echo "Enter 3 numbers"
read a b c

if [ $a -gt $b ] && [ $a -gt $c ]
then
    echo "a is greater"
elif [ $b -gt $a ] && [ $b -gt $c ]
then
    echo "b is greater"
else
    echo "c is greater"
fi
***************************************************
LEAP YEAR

 echo enter year
 read year
 if((year%4==0 && year%100!=0))||((year%400==0))
 then
 echo leap year
 else 
 echo not a leap year
 fi

*****************************************************
ODD OR EVEN

echo enter number
 read n
 if((n%2==0 ))
 then
 echo even
 else 
 echo odd
 fi
*******************************************************
POS NEG

echo enter number
 read n
 if((n>0 ))
 then
 echo positive
 else 
 echo negative
 fi
****************************************************************
CPU-FIFO  
#include<iostream>
using namespace std;
void findwaitingtime(int p[],int bt[],int wt[],int n){
    wt[0]=0;
    for(int i=1;i<n;i++){
        wt[i]=bt[i-1]+wt[i-1];
    }
}
void findturnaroundtime(int p[],int bt[],int wt[],int n,int tat[]){
    for(int i=0;i<n;i++){
        tat[i]=bt[i]+wt[i];
    }
}
void findaveragetime(int p[],int bt[],int n){
    int wt[n],tat[n],tot_wt=0,tot_tat=0;
    findwaitingtime(p,bt,wt,n);
    findturnaroundtime(p,bt,wt,n,tat);
    cout<<"Process BurstTime WaitingTime TurnAroundTime "<<endl;
    for(int i=0;i<n;i++){
        tot_wt+=wt[i];
        tot_tat+=wt[i];
        cout<<" p"<<i+1<<"  "<<bt[i]<<"  "<<wt[i]<<"  "<<tat[i]<<endl;
    }
    cout<<"Avg Waiting time = "<<(float)tot_wt/(float)n<<endl;
    cout<<"Avg Turnaround time = "<<(float)tot_tat/(float)n;
}

int main(){
    int a,b,c,d,e;
    cout<<"enter process";
    cin>>a>>b>>c>>d>>e;
    int p[]={a,b,c,d,e};
    cout<<"enter bt"<<endl;
    int b1,b2,b3,b4,b5;
    cin>>b1,b2,b3,b4,b5;
    int bt[]={b1,b2,b3,b4,b5};
    int n=sizeof p/sizeof p[0];
    findaveragetime(p,bt,n);
}
***********************************************************************
SJF CPU


#include<bits/stdc++.h>
using namespace std;
int main()
{
    cout<<"SJF CPU Scheduling\n";
    cout<<"Enter the number of Process : ";
    int n;
    cin>>n;
    pair<int,int> p[n];
    for(int i=0; i<n; i++)
    {
        cout<<"Burst time of Process P"<<(i+1)<<" : ";
        cin>>p[i].first;
        p[i].second = i;
    }
    int wait[n],tat[n];
    sort(p,p+n);
    int crntTime = 0;
    for(int i=0; i<n; i++)
    {
        int ind = p[i].second;
        wait[ind] = crntTime;
        crntTime += p[i].first;
        tat[ind] = crntTime;
    }
    cout<<"process waitTime\ttat\n";
    double tot_wt = 0,tot_tat = 0;
    for(int i=0; i<n; i++)
    {
        cout<<i + 1<<"\t\t"<<wait[i]<<"\t\t"<<tat[i]<<endl;
        tot_wt += wait[i];
        tot_tat += tat[i];
    }
    cout<<"avg Wait Time\tavg Tat\n";
    cout<<tot_wt/(double)n<<"\t\t"<<tot_tat/(double)n<<endl;
}

***********************************************************************
DISK FIFO

#include<bits/stdc++.h>
using namespace std;
int main(){
    cout<<" size";
    int n;
    cin>>n;
    int a[n];
    cout<<"array";
    for(int i=1;i<=n;i++)cin>>a[i];
    int head,tail=0,diff;
    cout<<"head";
    cin>>head;
    a[0]=head
    for(int i=0;i<=n-1;i++){
        diff=abs(a[i]-a[i+1]);
        tail+=diff;
    }
    cout<<tail;
}
************************************************************************
FIFO PAGE REPLACEMENT


#include<bits/stdc++.h>
using namespace std;
int main(){
    int n;cin>>n;int pg[50];int avail,pgf=0;
    for(int i=0;i<n;i++)cin>>pg[i];
    int no;
    cin>>no;
    int frame[10];
    for(int i=0;i<n;i++)frame[i]=-1;
    int k=0;
    for(int i=0;i<n;i++){
        cout<<pg[i]<<" ";
        avail=0;
        for(int j=0;j<no;j++)
        if(frame[j]==pg[i])
        avail=1;
        if(avail==0){
          frame[k]=pg[i];
          k=(k+1)%no;
        pgf++;
        for(int j=0;j<no;j++)
            cout<<frame[j]<<" ";
        }
        cout<<endl;    
        
    }
    cout<<pgf;
}
**********************************************************************
PROCESS SYSTEM CALLS

#include<bits/stdc++.h>
using namespace std;
int main(){
    int pid;
    pid=fork();
    if(pid<0){
       cout<<"fork cannot be created";
       exit(0);
    }
    else if(pid==0){
        execlp("/home/ls","ls",NULL);
        cout<<"The process id of child "<<getpid()<<endl;
        cout<<"The process id of parent "<<getppid()<<endl;
        
    }
    else{
        cout<<"The process id of parent "<<getpid()<<endl;
        cout<<"The process id of grandparent "<<getppid()<<endl;
    }
}

***********************************************************************
STAT SYSTEM CALL

#include <iostream>
#include <sys/stat.h>
#include <cstdlib>
using namespace std;
int main(){
    struct stat s;int a,b;
    if(stat("main.cpp",&s)==-1){
        perror("Error: cannot stat file");
        exit(0);
    }
    a=s.st_blksize;
    b=s.st_size;
   cout << "ALLOCATED SIZE OF THE FILE: " << a << std::endl;
    cout << "Actual size of the file: " << b << std::endl;
    return 0;
}
*************************************************************************
SAFE OR NOT

#include<stdio.h>
int main()
{
  int n,m,i,j,k;
  n=5;
  m=3;
  int alloc[5][3]={{0,1,0},{2,0,0},{3,0,2},{2,1,2},{0,0,2}};
  int max[5][3]={{7,5,3},{3,2,2},{9,0,2},{2,2,2},{4,3,3}};
  int avail[3]={3,3,2};
  int f[n],ans[n],ind=0;
  for(k=0;k<n;k++){
      f[k]=0;
  }
  int need[n][m];
  for(i=0;i<n;i++){
      for(j=0;j<m;j++){
        need[i][j]=max[i][j]-alloc[i][j];
      }
   }
   int y=0;
   for(k=0;k<5;k++){
      for(i=0;i<n;i++){
        if(f[i]==0){
            int flag=0;
            for(j=0;j<m;j++){
                if(need[i][j]>avail[j]){
                    flag=1;
                     break;
                }
            }
            if(flag==0){
               ans[ind++]=i+1;
               for(y=0;y<m;y++)
                   avail[y]+=alloc[i][y];
                   f[i]=1;
                }
            }
        }
     }
     int flag=1;
     for(int i=0;i<n;i++){
        if(f[i]==0){
          flag=0;
          printf("The folowing system is not safe");
          break;
        }
     }
     if(flag==1){
        printf("Following is the SAFE Sequence\n");
        for(i=0;i<n-1;i++)
            printf(" P%d ->",ans[i]);
        printf(" P%d",ans[i]);
     }
         return 0;
}
**************************************************************************
1.b  COPY RENAME

#include<bits/stdc++.h>
using namespace std;
int main() {
    string str;A
    
    ifstream inFile{"file1.txt"};
    ofstream outFile{"file2.txt"};
    
    if(inFile){
        while(getline(inFile, str)){
            outFile << str << "\n";
        }
    }else{
        cout << "Failed"<<endl;
    }
    
    char first_file[] = "file1.txt";
    char new_file[] = "newfile1.txt";
    
    if(rename(first_file, new_file) != 0)
        cout << "Failed";
    else
        cout << "Success";
        
}
********************************************************************************
PRIORITY CPU

#include<bits/stdc++.h>
using namespace std;
bool comp(pair<int,pair<int,int>> &a,pair<int,pair<int,int>> &b)
{
    if(a.first == b.first)
    {
        return a.second.second< b.second.second;
    }
    return a.first<b.first;
}
int main()
{
    cout<<"Enter the number of Process : ";
    int n;
    cin>>n;
    pair<int,pair<int,int>> p[n];
    for(int i=0; i<n; i++)
    {
        cout<<"Priority of Process P"<<(i+1)<<": ";
        cin>>p[i].first;
        cout<<"Burst time of Process P"<<(i+1)<<" : ";
        cin>>p[i].second.first;
        p[i].second.second = i;
    }
    int wait[n],tat[n];
    sort(p,p+n,comp);
    int crntTime = 0;
    for(int i=0; i<n; i++)
    {
        int ind = p[i].second.second;
        wait[ind] = crntTime;
        crntTime += p[i].second.first;
        tat[ind] = crntTime;
    }
    cout<<"process waitTime\ttat\n";
    double tot_wt = 0,tot_tat = 0;
    for(int i=0; i<n; i++)
    {
        cout<<i + 1<<"\t\t"<<wait[i]<<"\t\t"<<tat[i]<<endl;
        tot_wt += wait[i];
        tot_tat += tat[i];
    }
    cout<<"avg Wait Time\tavg Tat\n";
    cout<<tot_wt/(double)n<<"\t\t"<<tot_tat/(double)n<<endl;
}
*************************************************************************************

FILE DIRECTORY OR NOT

6.a.file in directory or not
#include <iostream>
#include <dirent.h>
#include <cstdlib>
#include <cstring>

void searchFile(const char *dname) {
    DIR *dir;
    struct dirent *ent;
    bool fileFound = false;
    char filename[15];

    // Open the directory
    dir = opendir(dname);
    if (dir == NULL) {
        std::cerr << "\nUnable to open directory" << std::endl;
        exit(1);
    }

    std::cout << "\nEnter the name of the file to be searched: ";
    std::cin >> filename;

    // Read the directory entries
    while ((ent = readdir(dir)) != NULL) {
        if (strcmp(filename, ent->d_name) == 0) {
            std::cout << ent->d_name << std::endl;
            fileFound = true;
            break;
        }
    }

    // Report the result
    if (fileFound) {
        std::cout << "\nThe given file is found\n\n";
    } else {
        std::cout << "\nFile not found\n";
    }

    // Close the directory
    if (closedir(dir) != 0) {
        std::cerr << "Unable to close directory" << std::endl;
    }
}

int main() {
    char dirname[25];

    std::cout << "\nEnter the directory to be searched: ";
    std::cin >> dirname;

    searchFile(dirname);

    return 0;
}
******************************************************************************************************************






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




1.a.factorial
echo Enter the number
read num

fact=1

for((i=1;i<=num;i++))
do
 fact=$((fact*i))
done
echo $fact
..............................................
1.b.cop/edit/rename
#include<bits/stdc++.h>
using namespace std;
int main() {
    string str;
    
    ifstream inFile{"file1.txt"};
    ofstream outFile{"file2.txt"};
    
    if(inFile){
        while(getline(inFile, str)){
            outFile << str << "\n";
        }
    }else{
        cout << "Failed"<<endl;
    }
    
    char first_file[] = "file1.txt";
    char new_file[] = "newfile1.txt";
    
    if(rename(first_file, new_file) != 0)
        cout << "Failed";
    else
        cout << "Success";
        
}
..............................................

2.a.fibanocci
echo Enter the Number
read N
a=0

b=1 
  
echo "The Fibonacci series is : "
  
for (( i=0; i<N; i++ ))
do
    echo -n "$a "
    fn=$((a + b))
    a=$b
    b=$fn
done
..............................................
2.b.fifo cpu scheduling
#include<iostream>
using namespace std;
int main() {
    cout<<"Enter number of Process : ";
    int n;
    cin>>n;
    cout<<"Enter the process\n";
    int process[n];
    int burst_time[n];
    for(int i=0 ; i<n ; i++) {
        cout<<"Process P"<<(i+1)<<": ";
        cin>>process[i];
        cout<<"Burst Time : ";
        cin>>burst_time[i];
    }
    int turn_around_time[n], wait_time[n];
    turn_around_time[0] = burst_time[0];
    for(int i=0 ; i<n ; i++) {
        turn_around_time[i] = turn_around_time[i-1]+burst_time[i];
    }
    for(int i=0 ; i<n ; i++) {
        wait_time[i] = turn_around_time[i]-burst_time[i];
    }
    int tot_wt=0,tot_tat=0;
    for(int i=0 ; i<n ; i++) {
        tot_tat += turn_around_time[i];
        tot_wt += wait_time[i];
    }
    cout<<"Process\tBurst Time\tTurn Around Time\tWait Time\n";
    for(int i=0 ; i<n ; i++) {
        cout<<process[i]<<"\t\t"<<burst_time[i]<<"\t\t"<<turn_around_time[i]<<"\t\t"<<wait_time[i]<<"\n";
    }
    cout<<"Average TAT = "<<(float)tot_tat/n;
    cout<<"\nAverage WT = "<<(float)tot_wt/n;
}
.........................................................
3.a.
.........................................................
3.b.fifo disk scheduling

#include<bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cout<<"Enter the size of the queue : ";
    cin>>n;
    cout<<"Enter the disk queue : ";
    int disk[n];
    for(int i=0 ; i<n ; i++) {
        cin>>disk[i];
    }
    cout<<"Enter the initial head position : ";
    int head;
    cin>>head;
    int tot_head_time = 0, no_of_head_movements = 0;
    for(int i=0 ; i<n ; i++) {
        tot_head_time += abs(head-disk[i]);
        head = disk[i];
        no_of_head_movements++;
    }
    cout<<"Toal seek time : "<<tot_head_time;
    cout<<"\nNumber of head movements : "<<no_of_head_movements;
}
.....................................................

4.a.sum n numbers
echo Enter the nummber
read N 

echo Enter the numbers

sum=0

for((i=0;i<N;i++))
do
read num 
sum=$((sum+num))
done
echo $sum
...................................................
4.b.producer consumer
#include<iostream>
using namespace std;

class ProducerConsumer {
private:
    int count = 0;
    int front = 0;
    int rear = 0;
    char buffer[5]; // Changed buffer size to 5
    int p_p = 0;
    int c_p = 0;

public:
    void producer(int);
    void consumer(int);
    void view(int);
    void run(int);
};

void ProducerConsumer::producer(int n) {
    char item;
    if (count < n) {
        cout << "Enter data: ";
        cin >> item;
        buffer[front] = item;
        front = (front + 1) % 5;
        count++;
        if (c_p == 1 && count == 1) {
            cout << "\nConsumer is now ready";
        }
    } else {
        cout << "\nBuffer is full...";
        p_p = 1;
    }
}

void ProducerConsumer::consumer(int n) {
    char item;
    if (count > 0) {
        item = buffer[rear];
        buffer[rear] = ' ';
        cout << "\nConsumed: " << item;
        rear = (rear + 1) % 5;
        count--;
        if (p_p == 1 && count == 4) {
            cout << "\nProducer is now ready";
        }
    } else {
        cout << "\nBuffer is empty...";
        c_p = 1;
    }
}

void ProducerConsumer::view(int n) {
    cout << "\nData in buffer: ";
    for (int i = 0; i < n; i++) {
        cout << "- " << buffer[i] << " ";
    }
    cout << endl;
}

void ProducerConsumer::run(int n) {
    int ch, f = 0;
    do {
        cout << "\nOptions:";
        cout << "\n1: Produce item";
        cout << "\n2: Consume item";
        cout << "\n3: View buffer";
        cout << "\n4: Exit";
        cout << "\nEnter your choice: ";
        cin >> ch;
        switch(ch) {
            case 1:
                producer(n);
                break;
            case 2:
                consumer(n);
                break;
            case 3:
                view(n);
                break;
            case 4:
                f = 1;
                break;
            default:
                cout << "\nEnter correct choice";
                break;
        }
    } while (f == 0);
}

int main() {
    ProducerConsumer pc;
    int n;
    cout << "Enter the count for the buffer: ";
    cin >> n;
    pc.run(n);
    return 0;
}
..................................................
5.a.greatest
5.a.
echo Enter the numbers
read N1
echo Enter the numbers
read N2
echo Enter the numbers
read N3

if [ $N1 -gt $N2 ] && [ $N1 -gt $N3 ]
then
   echo $N1
elif [ $N2 -gt $N1 ] && [ $N2 -gt $N3 ]
then
   echo $N2
else
   echo $N3 
fi
...................................................
5.b.fifo page replacement
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int i, j, n, no, k, avail, count = 0;
    vector<int> a(50);
    vector<int> frame(10, -1);

    cout << "FIFO PAGE REPLACEMENT ALGORITHM:" << endl;
    cout << "\nENTER THE NUMBER OF PAGES:\n";
    cin >> n;
    cout << "\nENTER THE PAGE NUMBER:\n";
    for (i = 0; i < n; i++) {
        cin >> a[i];
    }
    cout << "\nENTER THE NUMBER OF FRAMES: ";
    cin >> no;
    
    j = 0;
    cout << "Reg page\tFrames" << endl;
    for (i = 0; i < n; i++) {
        cout << a[i] << "\t\t";
        avail = 0;

        for (k = 0; k < no; k++) {
            if (frame[k] == a[i]) {
                avail = 1;
                break;
            }
        }
        if (avail == 0) {
            frame[j] = a[i];
            j = (j + 1) % no;
            count++;
            for (k = 0; k < no; k++) {
                if (frame[k] != -1)
                    cout << frame[k] << "\t";
                else
                    cout << "-\t";
            }
        }
        cout << endl;
    }
    cout << "\nTotal number of Page Faults: " << count << endl;
    return 0;
}
..................................................
6.a.directory
6.a.file in directory or not
#include <iostream>
#include <dirent.h>
#include <cstdlib>
#include <cstring>

void searchFile(const char *dname) {
    DIR *dir;
    struct dirent *ent;
    bool fileFound = false;
    char filename[15];

    // Open the directory
    dir = opendir(dname);
    if (dir == NULL) {
        std::cerr << "\nUnable to open directory" << std::endl;
        exit(1);
    }

    std::cout << "\nEnter the name of the file to be searched: ";
    std::cin >> filename;

    // Read the directory entries
    while ((ent = readdir(dir)) != NULL) {
        if (strcmp(filename, ent->d_name) == 0) {
            std::cout << ent->d_name << std::endl;
            fileFound = true;
            break;
        }
    }

    // Report the result
    if (fileFound) {
        std::cout << "\nThe given file is found\n\n";
    } else {
        std::cout << "\nFile not found\n";
    }

    // Close the directory
    if (closedir(dir) != 0) {
        std::cerr << "Unable to close directory" << std::endl;
    }
}

int main() {
    char dirname[25];

    std::cout << "\nEnter the directory to be searched: ";
    std::cin >> dirname;

    searchFile(dirname);

    return 0;
}
................................................
6.b.sjf cpu scheduling

#include<bits/stdc++.h>
using namespace std;
int main()
{
    cout<<"SJF CPU Scheduling\n";
    cout<<"Enter the number of Process : ";
    int n;
    cin>>n;
    pair<int,int> p[n];
    for(int i=0; i<n; i++)
    {
        cout<<"Burst time of Process P"<<(i+1)<<" : ";
        cin>>p[i].first;
        p[i].second = i;
    }
    int wait[n],tat[n];
    sort(p,p+n);
    int crntTime = 0;
    for(int i=0; i<n; i++)
    {
        int ind = p[i].second;
        wait[ind] = crntTime;
        crntTime += p[i].first;
        tat[ind] = crntTime;
    }
    cout<<"process waitTime\ttat\n";
    double tot_wt = 0,tot_tat = 0;
    for(int i=0; i<n; i++)
    {
        cout<<i + 1<<"\t\t"<<wait[i]<<"\t\t"<<tat[i]<<endl;
        tot_wt += wait[i];
        tot_tat += tat[i];
    }
    cout<<"avg Wait Time\tavg Tat\n";
    cout<<tot_wt/(double)n<<"\t\t"<<tot_tat/(double)n<<endl;
}
.................................................
7.a.Process 
#include <iostream>
#include <unistd.h>
using namespace std;
int main() {
    int pid = fork();

    if (pid < 0) {
       cout << "The fork cannot be created" << std::endl;
        exit(1);
    } else if (pid == 0) {
        execlp("\home\ls", "ls", nullptr);
        cout << "\nThe process id of the child: " << getpid() << endl;
        cout << "\nThe process id of the parent: " << getppid() <<endl;
    } else {
        cout << "\nThe process id of the parent: " << getpid() << endl;
        cout << "\nThe process id of the grandparent: " << getppid() <<endl;
    }

    return 0;
}
.................................................
7.b.bankers
#include<iostream>
using namespace std;

int main() {
    int n = 5;
    int m = 3;
    int alloc[5][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}, {2, 1, 2}, {0, 0, 2}};
    int max[5][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}, {2, 2, 2}, {4, 3, 3}};
    int avail[3] = {3, 3, 2};
    int f[n], ans[n], ind = 0;

    for (int k = 0; k < n; k++) {
        f[k] = 0;
    }

    int need[n][m];

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    for (int k = 0; k < 5; k++) {
        for (int i = 0; i < n; i++) {
            if (f[i] == 0) {
                int flag = 0;
                for (int j = 0; j < m; j++) {
                    if (need[i][j] > avail[j]) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    ans[ind++] = i + 1;
                    for (int y = 0; y < m; y++) {
                        avail[y] += alloc[i][y];
                    }
                    f[i] = 1;
                }
            }
        }
    }

    int flag = 1;
    for (int i = 0; i < n; i++) {
        if (f[i] == 0) {
            flag = 0;
            cout << "The following system is not safe" << endl;
            break;
        }
    }
    if (flag == 1) {
        cout << "Following is the SAFE Sequence" << endl;
        for (int i = 0; i < n - 1; i++) {
            cout << " P" << ans[i] << " ->";
        }
        cout << " P" << ans[n - 1] << endl;
    }

    return 0;
}
.........................................................
8.a.sum
echo Enter the nummber
read N 

echo Enter the numbers

sum=0

for((i=0;i<N;i++))
do
read num 
sum=$((sum+num))
done
echo $sum
....................................................
8.b.priority
#include<bits/stdc++.h>
using namespace std;
bool comp(pair<int,pair<int,int>> &a,pair<int,pair<int,int>> &b)
{
    if(a.first == b.first)
    {
        return a.second.second< b.second.second;
    }
    return a.first<b.first;
}
int main()
{
    cout<<"Enter the number of Process : ";
    int n;
    cin>>n;
    pair<int,pair<int,int>> p[n];
    for(int i=0; i<n; i++)
    {
        cout<<"Priority of Process P"<<(i+1)<<": ";
        cin>>p[i].first;
        cout<<"Burst time of Process P"<<(i+1)<<" : ";
        cin>>p[i].second.first;
        p[i].second.second = i;
    }
    int wait[n],tat[n];
    sort(p,p+n,comp);
    int crntTime = 0;
    for(int i=0; i<n; i++)
    {
        int ind = p[i].second.second;
        wait[ind] = crntTime;
        crntTime += p[i].second.first;
        tat[ind] = crntTime;
    }
    cout<<"process waitTime\ttat\n";
    double tot_wt = 0,tot_tat = 0;
    for(int i=0; i<n; i++)
    {
        cout<<i + 1<<"\t\t"<<wait[i]<<"\t\t"<<tat[i]<<endl;
        tot_wt += wait[i];
        tot_tat += tat[i];
    }
    cout<<"avg Wait Time\tavg Tat\n";
    cout<<tot_wt/(double)n<<"\t\t"<<tot_tat/(double)n<<endl;
}
.................................................
9.a.i
echo Enter the year

read n
a=$((n%4))
b=$((n%400))
c=$((n%100))

if [ $b -eq 0 ]
then 
echo is leap year
elif [ $c -eq 0 ]
then
echo Not leap year
elif [ $a -eq 0 ]
then
echo leap year
else
echo is not a leap year;
fi;
................................................
9.a.ii

echo Enter the number

read n


if [ $n -lt 0 ]
then 
  echo negative
else
echo positive;
fi;
.................................................
9.b.i.stat
#include <iostream>
#include <sys/stat.h>
#include <cstdlib>
#include <cerrno>
#include <cstring>
using namespace  std;


int main() {
    struct stat s;
    int a;
    int b;
    
    if (stat("suba", &s) == -1) {
        cout<< "Error: cannot stat file: " << strerror(errno) << endl;
        exit(EXIT_FAILURE);
    }
    
    a = s.st_blksize;
    b = s.st_size;
    
    std::cout << "ALLOCATED SIZE OF THE FILE: " << a << " bytes" << std::endl;
    std::cout << "ACTUAL SIZE OF THE FILE: " << b << " bytes" << std::endl;
    
    return 0;
}
.................................................
9.b.ii
#include<bits/stdc++.h>
using namespace std;
int main() {
    int n;
    cout<<"Enter the size of the queue : ";
    cin>>n;
    cout<<"Enter the disk queue : ";
    int disk[n];
    for(int i=0 ; i<n ; i++) {
        cin>>disk[i];
    }
    cout<<"Enter the initial head position : ";
    int head;
    cin>>head;
    int tot_head_time = 0, no_of_head_movements = 0;
    for(int i=0 ; i<n ; i++) {
        tot_head_time += abs(head-disk[i]);
        head = disk[i];
        no_of_head_movements++;
    }
    cout<<"Toal seek time : "<<tot_head_time;
    cout<<"\nNumber of head movements : "<<no_of_head_movements;
}
..................................................
10.a.odd or even

echo Enter the number

read n
a=$((n%2))

if [ $a -eq 0 ]
then 
  echo even
else
echo odd;
fi;
...................................................
10.b.i.fifo page replacement
#include <iostream>
#include <vector>
using namespace std;

int main() {
    int i, j, n, no, k, avail, count = 0;
    vector<int> a(50);
    vector<int> frame(10, -1);

    cout << "FIFO PAGE REPLACEMENT ALGORITHM:" << endl;
    cout << "\nENTER THE NUMBER OF PAGES:\n";
    cin >> n;
    cout << "\nENTER THE PAGE NUMBER:\n";
    for (i = 0; i < n; i++) {
        cin >> a[i];
    }
    cout << "\nENTER THE NUMBER OF FRAMES: ";
    cin >> no;
    
    j = 0;
    cout << "Reg page\tFrames" << endl;
    for (i = 0; i < n; i++) {
        cout << a[i] << "\t\t";
        avail = 0;

        for (k = 0; k < no; k++) {
            if (frame[k] == a[i]) {
                avail = 1;
                break;
            }
        }
        if (avail == 0) {
            frame[j] = a[i];
            j = (j + 1) % no;
            count++;
            for (k = 0; k < no; k++) {
                if (frame[k] != -1)
                    cout << frame[k] << "\t";
                else
                    cout << "-\t";
            }
        }
        cout << endl;
    }
    cout << "\nTotal number of Page Faults: " << count << endl;
    return 0;
}
.............................................
10.b.ii.process
#include <iostream>
#include <unistd.h>
using namespace std;
int main() {
    int pid = fork();

    if (pid < 0) {
       cout << "The fork cannot be created" << std::endl;
        exit(1);
    } else if (pid == 0) {
        execlp("\home\ls", "ls", nullptr);
        cout << "\nThe process id of the child: " << getpid() << endl;
        cout << "\nThe process id of the parent: " << getppid() <<endl;
    } else {
        cout << "\nThe process id of the parent: " << getpid() << endl;
        cout << "\nThe process id of the grandparent: " << getppid() <<endl;
    }

    return 0;
}



